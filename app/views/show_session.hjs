<!DOCTYPE html>
<html>

<head>
    <title>{{title}}</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">

</head>

<body>
    {{!-- header --}}
    <header>
        <nav>
            <a href="/">Events listener</a>
            <a href="/session-list">Session list</a>
        </nav>
    </header>
    {{!-- main --}}
        <main>
            <h3>Session #{{data.id}} Playback</h3>
            <section class="player">
                <div class="player__container">
                    width: {{ data.width }} | height: {{ data.height }}
                    <iframe style="border:1px solid black" src="" frameborder="0" width="{{ data.width }}" height="{{data.height}}">
                    </iframe>
                    <button class="player__action player__action--play">Play</button>
                    <button class="player__action player__action--pause">Pause</button>
                </div>
            </section>
        </main>

        {{!-- storing in hidden div all the copy html was when he user started the session --}}
        <div id="html-copy" style="display:none">
            {{{data.html_copy}}}
        </div>
        {{!-- saving in hidden field all the events to access it in the js --}}
        <div id="events" data-events="{{data.data}}"></div>
        {{!-- storing the started time of the session to accesss it in the js --}}
        <div id="events-started-at" data-started-at="{{data.started_at}}"></div>
        <script>
            const fakeCursor = `<span class="cursor" style="position:absolute;height:2px;width:2px;padding:2px; background-color: blue; border-radius: 50%;"></span>`;
            const iframe = document.querySelector('iframe');
            iframe.contentDocument.documentElement.innerHTML += document.querySelector('#html-copy').innerHTML;
            const iframeDoc = iframe.contentDocument.documentElement;
            iframeDoc.querySelector('body').innerHTML+= fakeCursor;
            const fakeCursorElment = iframeDoc.querySelector('body').querySelector('.cursor');
            const events = JSON.parse(document.querySelector('#events').dataset.events);
            let started_at = parseInt(document.querySelector('#events-started-at').dataset.startedAt);

            const UserInfo = {
                time_entered_page: Date.now(),
                time_clicked_play: null,
                times_clicked_play: 0,
                pause: false,
            }

            let startPlay = Date.now();
            let i = 0;

            //play
            document.querySelector('.player__action--play').addEventListener('click', function(){
                //if in the initial state when we clicked play pause was false then the iteration will start at 0 else we need to memoize the iteration was when we paused
                if(UserInfo.pause===false){
                    i = 0;
                }
                
                UserInfo.pause = false;
                //here we check if the user click play for the first time
                if(!UserInfo.times_clicked_play){
                    UserInfo.time_clicked_play = Date.now();
                    UserInfo.times_clicked_play++;
                }
                //invoking the draw function
                draw();
            });
            //pause
            document.querySelector('.player__action--pause').addEventListener('click', function(){
                UserInfo.pause = true; 
            });


            function draw(){
                let event = events[i];
                if (!event || UserInfo.pause) {
                    return;
                }
                let offsetRecording = event.time - started_at;
                let offsetPlay = (Date.now() - UserInfo.time_entered_page) * 1;
                if (offsetPlay >= offsetRecording) {
                    drawEvent(event, fakeCursorElment, iframeDoc);
                    i++;
                }

                if (i < events.length) {
                    requestAnimationFrame(draw);
                } else {
                    //iframe.remove();
                }
            }

            function drawEvent(event, fakeCursorElment, iframeDoc) {
                if (event.type === "click" || event.type === "mousemove") {
                    fakeCursorElment.style.top = `${event.y}px`;
                    fakeCursorElment.style.left = `${event.x}px`;
                }

                if (event.type === "click") {
                    flashClass(fakeCursorElment, "click");
                }

                if (event.type === "keypress") {
                    console.log( getKeyCodeList(event.keyCode))
                    console.log(event.keyCode)
                    // when user presses a key then the keycode will be inserted into the cursor
                    fakeCursorElment.textContent = getKeyCodeList(event.keyCode);
                    window.setTimeout(()=>{
                        fakeCursorElment.textContent = '';
                    }, 300)
                }
            }
            
            //add class to cursor when clicked
            function flashClass(el, className) {
                let prevColor = el.style.backgroundColor; 
                let prevPadding = parseInt(el.style.padding); 
                el.style.backgroundColor='red';
                el.style.padding=`${prevPadding*2}px`;
                window.setTimeout(()=>{
                    el.style.backgroundColor=prevColor;
                    el.style.padding=prevPadding;
                }, 300)
            }

            function getKeyCodeList(key) {
                function getKeyByValue(object, value) {
                    return Object.keys(object).find(key => object[key] === value);
                }
                let obj = {
                        backspace: 8,
                        tab: 9,
                        enter: 13,
                        shiftleft: 16,
                        shiftright: 16,
                        ctrlleft: 17,
                        ctrlrigght: 17,
                        altleft: 18,
                        altright: 18,
                        pause: 19,
                        capslock: 20,
                        escape: 27,
                        pageup: 33,
                        pagedown: 34,
                        end: 35,
                        home: 36,
                        arrowleft: 37,
                        arrowup: 38,
                        arrowright: 39,
                        arrowdown: 40,
                        insert: 45,
                        delete: 46,
                        0: 48,
                        1: 49,
                        2: 50,
                        3: 51,
                        4: 52,
                        5: 53,
                        6: 54,
                        7: 55,
                        8: 56,
                        9: 57,
                        a: 65,
                        b: 66,
                        c: 67,
                        d: 68,
                        e: 69,
                        f: 70,
                        g: 71,
                        h: 72,
                        i: 73,
                        j: 74,
                        k: 75,
                        l: 76,
                        m: 77,
                        n: 78,
                        o: 79,
                        p: 80,
                        q: 81,
                        r: 82,
                        s: 83,
                        t: 84,
                        u: 85,
                        v: 86,
                        w: 87,
                        x: 88,
                        y: 89,
                        z: 90,
                        metaleft: 91,
                        metaright: 92,
                        select: 93,
                        numpad0: 96,
                        numpad1: 97,
                        numpad2: 98,
                        numpad3: 99,
                        numpad4: 100,
                        numpad5: 101,
                        numpad6: 102,
                        numpad7: 103,
                        numpad8: 104,
                        numpad9: 105,
                        numpadmultiply: 106,
                        numpadadd: 107,
                        numpadsubtract: 109,
                        numpaddecimal: 110,
                        numpaddivide: 111,
                        f1: 112,
                        f2: 113,
                        f3: 114,
                        f4: 115,
                        f5: 116,
                        f6: 117,
                        f7: 118,
                        f8: 119,
                        f9: 120,
                        f10: 121,
                        f11: 122,
                        f12: 123,
                        numlock: 144,
                        scrolllock: 145,
                        semicolon: 186,
                        equalsign: 187,
                        comma: 188,
                        minus: 189,
                        period: 190,
                        slash: 191,
                        backquote: 192,
                        bracketleft: 219,
                        backslash: 220,
                        braketright: 221,
                        quote: 222
                    };

                    return getKeyByValue(obj, key)
            }
        </script>
</body>

</html>